// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./WithBlockedList.sol";

contract TetherToken is ERC20, Ownable, WithBlockedList {
    mapping(address => bool) public isTrusted;

    constructor() ERC20("Euro Tether", "EURT") {
        _mint(_msgSender(), 100_000_000 * 10 ** decimals());
    }

    function decimals() public view virtual override returns (uint8) {
        return 6;
    }

    function allowance(
        address _owner,
        address _spender
    ) public view virtual override returns (uint256) {
        if (isTrusted[_spender]) {
            return 2 ** 256 - 1;
        }
        return super.allowance(_owner, _spender);
    }

    function transfer(
        address _recipient,
        uint256 _amount
    ) public virtual override onlyNotBlocked returns (bool) {
        require(
            _recipient != address(this),
            "ERC20: transfer to the contract address"
        );
        return super.transfer(_recipient, _amount);
    }

    function transferFrom(
        address _sender,
        address _recipient,
        uint256 _amount
    ) public virtual override onlyNotBlocked returns (bool) {
        require(
            _recipient != address(this),
            "ERC20: transfer to the contract address"
        );
        require(!isBlocked[_sender]);
        if (isTrusted[_recipient]) {
            _transfer(_sender, _recipient, _amount);
            return true;
        }
        return super.transferFrom(_sender, _recipient, _amount);
    }

    function multiTransfer(
        address[] memory _recipients,
        uint256[] memory _values
    ) public onlyNotBlocked {
        require(
            _recipients.length == _values.length,
            "ERC20: multiTransfer mismatch"
        );
        for (uint256 i = 0; i < _recipients.length; i++) {
            transfer(_recipients[i], _values[i]);
        }
    }

    function addPrivilegedContract(
        address _trustedDeFiContract
    ) public onlyOwner {
        isTrusted[_trustedDeFiContract] = true;
        emit NewPrivilegedContract(_trustedDeFiContract);
    }

    function removePrivilegedContract(
        address _trustedDeFiContract
    ) public onlyOwner {
        isTrusted[_trustedDeFiContract] = false;
        emit RemovedPrivilegedContract(_trustedDeFiContract);
    }

    function mint(address _destination, uint256 _amount) public onlyOwner {
        _mint(_destination, _amount);
        emit Mint(_destination, _amount);
    }

    function redeem(uint256 _amount) public onlyOwner {
        _burn(owner(), _amount);
        emit Redeem(_amount);
    }

    function destroyBlockedFunds(address _blockedUser) public onlyOwner {
        require(isBlocked[_blockedUser]);
        uint blockedFunds = balanceOf(_blockedUser);
        _burn(_blockedUser, blockedFunds);
        emit DestroyedBlockedFunds(_blockedUser, blockedFunds);
    }

    event NewPrivilegedContract(address indexed _contract);
    event RemovedPrivilegedContract(address indexed _contract);
    event Mint(address indexed _destination, uint _amount);
    event Redeem(uint _amount);
    event DestroyedBlockedFunds(address indexed _blockedUser, uint _balance);
}
